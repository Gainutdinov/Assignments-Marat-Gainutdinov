		Main
-----Introduction Sequence-----
1: Introduction to Git Commits
git commit
git commit

2: Branching in Git
git checkout -b bugFix

3: Merging in Git
git checkout bugFix; git merge master 
git checkout -b bugFix
git commit
git checkout master
git commit
git merge bugFix

4: Rebase Introduction
git checkout -b bugFix
git commit
git checkout master
git commit
git checkout bugFix
git rebase master


-----Ramping Up-----
1: Detach yo' HEAD
git checkout C4

2: Relative Refs (^)
#to moving upward one commit at a time with ^ or number of times with ~<num>
git checkout bugFix
git checkout HEAD^

3: Relative Refs #2 (~)
#relative refs is commonly used to move branches around
#you can directly reassign a branch to a commit with the -f option likne git branch -f HEAD~3
git checkout master
git branch -f master C6
git checkout bugFix
git branch -f bugFix HEAD~3
git checkout C1

or 

git branch -f master C6
git checkout HEAD~1
git branch -f bugFix HEAD~1

4: Reversing Changes in Git
#git reset reverts changes by moving a branch backwards for ex: git reset HEAD~1
#git reset will move a branch backwards as if the commit had never been made
#while git reset works for local branches only it doesn't works with remote repo
#git revert it's like remove current commit but go agead with new commit 
#but do directly reverse changes for ex: git revert HEAD
git reset HEAD^
git checkout pushed
git revert HEAD

-----Moving Work Around-----
1: Cherry-pick Intro
#git cherry-pick <commit1> <commit2> <...>
#It's a very straightforward way of saying that you would like to copy a series 
#of commits below your current location (HEAD)
git cherry-pick C3 C4 C7

2: Interactive Rebase Intro
#all interactive rebase means is using the rebase command with the -i opion
#example git rebase -i HEAD~4
git rebase -i HEAD~4

-----A Mixed Bag-----
1: Grabbing Just 1 Commit
git checkout master
git cherry-pick C4

2: Juggling Commits
#We will re-order the commits so the one we want to change is on top with git rebase -i
#We will commit --amend to make the slight modification
#Then we will re-order the commits back to how they were previously with git rebase -i
#Finally, we will move master to this updated part of the tree to finish the level (via #the method of your choosing)
git rebase -i master #C3 C2
git commit --amend 
git rebase -i master #C2 C3
git checkout master
git branch -f master C3''

3: Juggling Commits #2
# we should use git cherry-pick C2 
git checkout master
git cherry-pick C2
git branch -f master C1
git cherry-pick C2' C3

4: Git Tags
#git tag v1 C1
git tag v1 C2
git tag v0 C1
git checkout C2 or git checkout v0

5: Git Describe
#git describe give you closest tag
#git describe <ref> <tag>_<numCommits>_g<hash>
# for example: git describe master output will be v1_2_gC2
# for example: git describe side output will be v2_1_gC4
git commit

-----Advanced Topics-----
1. Rebasing over 9000 times
git rebase -i master C3
git rebase -i HEAD C6
git rebase -i HEAD C7
git branch -f master C7'
	or
git rebase master bugFix
git rebase bugFix side
git rebase side another
git rebase another master

2: Multiple parents
#via git checkout master^2 we can get to the 2nd parent or
#via git checkout master^1 we can get to the 1st parent
#git checkout HEAD~; git checkout HEAD^2; git checkout HEAD~2 = git checkout HEAD~^2~2 
git checkout HEAD~^2~
git checkout -b bugWork
git checkout master
	or
git branch bugWork master^^2^

3: Branch Spaghetti
git checkout one
git cherry-pick C4 C3 C2
git checkout two
git cherry-pick C5 C4' C3' C2'
git branch -f three C2



		Remote
-----Push & Pull -- Git Remotes!-----














